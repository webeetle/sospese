{"version":3,"sources":["usePosition.js","App.js","serviceWorker.js","index.js"],"names":["defaultSettings","enableHighAccuracy","timeout","maximumAge","App","watch","settings","useState","position","setPosition","error","setError","onChange","coords","timestamp","latitude","longitude","accuracy","onError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","getCurrentPosition","clearWatch","usePosition","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"qPAEMA,EAAkB,CACtBC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,GCaCC,MAdf,WAAgB,IAAD,EDIY,WAAgD,IAA/CC,EAA8C,wDAA/BC,EAA+B,uDAApBN,EAAoB,EACxCO,mBAAS,IAD+B,mBACjEC,EADiE,KACvDC,EADuD,OAE9CF,mBAAS,MAFqC,mBAEjEG,EAFiE,KAE1DC,EAF0D,KAIlEC,EAAW,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UACzBL,EAAY,CACVM,SAAUF,EAAOE,SACjBC,UAAWH,EAAOG,UAClBC,SAAUJ,EAAOI,SACjBH,eAIEI,EAAU,SAACR,GACfC,EAASD,EAAMS,UAoBjB,OAjBAC,qBAAU,WACR,IAAMC,EAAMC,UAAUC,YACtB,GAAKF,EAAL,CAKA,IAAIG,EAAU,KAOd,OANInB,EACFmB,EAAUH,EAAII,cAAcb,EAAUM,EAASZ,GAE/Ce,EAAIK,mBAAmBd,EAAUM,EAASZ,GAGrC,kBAAMkB,GAAWH,EAAIM,WAAWH,IAXrCb,EAAS,kCAYV,CAACN,EAAOC,IAEJ,eAAIE,EAAX,CAAqBE,UCrCgBkB,GAA9Bb,EADM,EACNA,SAAUC,EADJ,EACIA,UAAWN,EADf,EACeA,MAC5B,OACE,yBAAKmB,UAAU,OACb,oCACA,2CACad,EAAS,6BADtB,cAEcC,EAAU,6BAFxB,UAGUN,KCAIoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMS,c","file":"static/js/main.02cacadc.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst defaultSettings = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0,\n};\n\nexport const usePosition = (watch = false, settings = defaultSettings) => {\n  const [position, setPosition] = useState({});\n  const [error, setError] = useState(null);\n\n  const onChange = ({coords, timestamp}) => {\n    setPosition({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      accuracy: coords.accuracy,\n      timestamp,\n    });\n  };\n\n  const onError = (error) => {\n    setError(error.message);\n  };\n\n  useEffect(() => {\n    const geo = navigator.geolocation;\n    if (!geo) {\n      setError('Geolocation is not supported');\n      return;\n    }\n\n    let watcher = null;\n    if (watch) {\n      watcher = geo.watchPosition(onChange, onError, settings);\n    } else {\n      geo.getCurrentPosition(onChange, onError, settings);\n    }\n\n    return () => watcher && geo.clearWatch(watcher);\n  }, [watch, settings]);\n\n  return {...position, error};\n};","import React from 'react';\nimport './App.css';\nimport {usePosition} from './usePosition';\n\nfunction App() {\n  const {latitude, longitude, error} = usePosition();\n  return (\n    <div className=\"App\">\n      <h1>Test</h1>\n      <code>\n        latitude: {latitude}<br/>\n        longitude: {longitude}<br/>\n        error: {error}\n      </code>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}